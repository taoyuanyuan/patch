diff --git a/src/http/modules/ngx_http_trim_filter_module.c b/src/http/modules/ngx_http_trim_filter_module.c
index 873626c..0e0531a 100644
--- a/src/http/modules/ngx_http_trim_filter_module.c
+++ b/src/http/modules/ngx_http_trim_filter_module.c
@@ -13,9 +13,14 @@
 
 #define NGX_HTTP_TRIM_SAVE_SLASH        -1
 #define NGX_HTTP_TRIM_SAVE_JSCSS        -2
-#define NGX_HTTP_TRIM_SAVE_HACKCSS      -3
-#define NGX_HTTP_TRIM_SAVE_JAVASCRIPT   -4
+#define NGX_HTTP_TRIM_SAVE_SPACE        -3
+#define NGX_HTTP_TRIM_SAVE_HACKCSS      -4
+#define NGX_HTTP_TRIM_SAVE_JAVASCRIPT   -5
 
+#define NGX_HTTP_TRIM_TAG_PRE            1
+#define NGX_HTTP_TRIM_TAG_STYLE          2
+#define NGX_HTTP_TRIM_TAG_SCRIPT         3
+#define NGX_HTTP_TRIM_TAG_TEXTAREA       4
 
 typedef struct {
     ngx_flag_t      trim_enable;
@@ -37,7 +42,9 @@ typedef struct {
     size_t          looked;
     size_t          saved_comment;
 
+    ngx_int_t       tag;
     ngx_int_t       saved;
+    ngx_int_t       count;
     ngx_uint_t      state;
 } ngx_http_trim_ctx_t;
 
@@ -47,17 +54,20 @@ typedef enum {
     trim_state_text_whitespace,         /* \r \t ' ' */
     trim_state_tag,                     /* <  */
     trim_state_tag_text,
+    trim_state_tag_attribute,
     trim_state_tag_whitespace,          /* \r \n \t ' ' */
     trim_state_tag_single_quote,        /* '  */
     trim_state_tag_double_quote,        /* "  */
     trim_state_tag_s,                   /* <s */
     trim_state_tag_pre_begin,           /* <pre */
+    trim_state_tag_pre,
+    trim_state_tag_pre_angle,
+    trim_state_tag_pre_nest,
     trim_state_tag_pre_end,             /* <pre    </pre> */
     trim_state_tag_textarea_begin,      /* <textarea */
     trim_state_tag_textarea_end,        /* <textarea </textarea> */
     trim_state_tag_style_begin,         /* <style */
     trim_state_tag_style_end,           /* <style    </style> */
-    trim_state_tag_style_css_begin,     /* <style type="text/css" */
     trim_state_tag_style_css_end,       /* <style    </style> */
     trim_state_tag_style_css_text,      /* <style type="text/css" */
     trim_state_tag_style_css_whitespace,
@@ -79,7 +89,6 @@ typedef enum {
     trim_state_tag_script_begin,        /* <script */
     trim_state_tag_script_end,          /* <script   </script> */
     trim_state_tag_script_js_end,       /* <script   </script> */
-    trim_state_tag_script_js_begin,     /* <script type="text/javascript" */
     trim_state_tag_script_js_text,      /* <script type="text/javascript" */
     trim_state_tag_script_js_single_quote,
     trim_state_tag_script_js_single_quote_esc,
@@ -252,6 +261,7 @@ ngx_http_trim_header_filter(ngx_http_request_t *r)
 
     ngx_http_set_ctx(r, ctx, ngx_http_trim_filter_module);
 
+    r->filter_need_temporary = 1;
     r->main_filter_need_in_memory = 1;
 
     ngx_http_clear_content_length(r);
@@ -308,6 +318,10 @@ ngx_http_trim_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
                 cl->buf->pos = ngx_http_trim_saved_jscss.data;
                 cl->buf->last = cl->buf->pos + 1;
 
+            } else if (ctx->saved == NGX_HTTP_TRIM_SAVE_SPACE) {
+                cl->buf->pos = (u_char *) " ";
+                cl->buf->last = cl->buf->pos + 1;
+
             } else if (ctx->saved == NGX_HTTP_TRIM_SAVE_JSCSS) {
                 cl->buf->pos = ngx_http_trim_saved_jscss.data;
                 cl->buf->last = cl->buf->pos + ngx_http_trim_saved_jscss.len;
@@ -394,16 +408,8 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\r':
                 continue;
             case '\n':
-                if (ctx->first_line) {
-                    ctx->first_line = 0;
-                    break;
-
-                } else {
-                    *read = ' ';
-                }
-
                 ctx->state = trim_state_text_whitespace;
-                if (ctx->prev == ch || ctx->prev == ' ') {
+                if (ctx->prev == ch) {
                     continue;
 
                 } else {
@@ -487,7 +493,23 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 ctx->state = trim_state_tag_whitespace;
+                continue;
+            case '>':
+                ctx->state = trim_state_text;
+                break;
+            default:
                 break;
+            }
+            break;
+
+        case trim_state_tag_attribute:
+            switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                ctx->state = trim_state_tag_whitespace;
+                continue;
             case '\'':
                 ctx->state = trim_state_tag_single_quote;
                 break;
@@ -495,7 +517,38 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
                 ctx->state = trim_state_tag_double_quote;
                 break;
             case '>':
-                ctx->state = trim_state_text;
+                if (ctx->tag == NGX_HTTP_TRIM_TAG_PRE) {
+                    ctx->state = trim_state_tag_pre;
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_TEXTAREA) {
+                    ctx->state = trim_state_tag_textarea_end;
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_SCRIPT) {
+                    if (conf->jscss_enable
+                        && ctx->looked == ngx_http_trim_script_js.len)
+                    {
+                        ctx->state = trim_state_tag_script_js_text;
+
+                    } else {
+                        ctx->state = trim_state_tag_script_end;
+                    }
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_STYLE) {
+                    if (conf->jscss_enable
+                        && ctx->looked == ngx_http_trim_style_css.len)
+                    {
+                        ctx->state = trim_state_tag_style_css_text;
+
+                    } else {
+                        ctx->state = trim_state_tag_style_end;
+                    }
+
+                } else {
+                    ctx->state = trim_state_text;
+                }
+
+                ctx->tag = 0;
+                ctx->looked = 0;
                 break;
             default:
                 break;
@@ -509,7 +562,7 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 ctx->state = trim_state_tag_whitespace;
-                break;
+                continue;
             case 't':
                 ctx->state = trim_state_tag_style_begin;
                 ctx->looked = 4;    /* </style> */
@@ -545,7 +598,7 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 ctx->state = trim_state_tag_whitespace;
-                break;
+                continue;
             case '>':
                 ctx->state = trim_state_text;
                 break;
@@ -589,7 +642,6 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
                 continue;
             }
 
-
             if ((size_t) (read - buf->pos) >= ctx->saved_comment) {
                 write = ngx_cpymem(write, ngx_http_trim_saved_html.data,
                                    ctx->saved_comment);
@@ -639,7 +691,8 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             look = ngx_http_trim_pre.data[ctx->looked++];    /* <pre> */
             if (ch == look) {
                 if (ctx->looked == ngx_http_trim_pre.len) {
-                    ctx->state = trim_state_tag_pre_end;
+                    ctx->state = trim_state_tag_pre;
+                    ctx->count = 1;
                     ctx->looked = 0;
                 }
                 break;
@@ -651,13 +704,13 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 if (ctx->looked == ngx_http_trim_pre.len) {
-                    ctx->state = trim_state_tag_pre_end;
-                    ctx->looked = 0;
-
-                } else {
-                    ctx->state = trim_state_tag_whitespace;
+                    ctx->tag = NGX_HTTP_TRIM_TAG_PRE;
+                    ctx->count = 1;
                 }
-                break;
+
+                ctx->state = trim_state_tag_whitespace;
+                ctx->looked = 0;
+                continue;
             case '>':
                 ctx->state = trim_state_text;
                 break;
@@ -683,13 +736,12 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 if (ctx->looked == ngx_http_trim_textarea.len) {
-                    ctx->state = trim_state_tag_textarea_end;
-                    ctx->looked = 0;
-
-                } else {
-                    ctx->state = trim_state_tag_whitespace;
+                    ctx->tag = NGX_HTTP_TRIM_TAG_TEXTAREA;
                 }
-                break;
+
+                ctx->state = trim_state_tag_whitespace;
+                ctx->looked = 0;
+                continue;
             case '>':
                 ctx->state = trim_state_text;
                 break;
@@ -721,19 +773,12 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 if (ctx->looked == ngx_http_trim_script.len) {
-                    if (conf->jscss_enable) {
-                        ctx->state = trim_state_tag_script_js_begin;
-
-                    } else {
-                        ctx->state = trim_state_tag_script_end;
-                    }
-
-                    ctx->looked = 0;
-
-                } else {
-                    ctx->state = trim_state_tag_whitespace;
+                    ctx->tag = NGX_HTTP_TRIM_TAG_SCRIPT;
                 }
-                break;
+
+                ctx->state = trim_state_tag_whitespace;
+                ctx->looked = 0;
+                continue;
             case '>':
                 ctx->state = trim_state_text;
                 break;
@@ -743,27 +788,6 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
             break;
 
-        case trim_state_tag_script_js_begin:
-            if (ch == '>') {
-                if (ctx->looked == ngx_http_trim_script_js.len) {
-                    ctx->state = trim_state_tag_script_js_text;
-
-                } else {
-                    ctx->state = trim_state_tag_script_end;
-                }
-                ctx->looked = 0;
-
-            } else {
-                if (ctx->looked != ngx_http_trim_script_js.len) {
-                    look = ngx_http_trim_script_js.data[ctx->looked++];
-                    if (ch != look) {
-                        ctx->looked = 0;
-                    }
-                }
-            }
-
-            break;
-
         case trim_state_tag_script_js_text:
             switch (ch) {
             case '\r':
@@ -950,6 +974,28 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_script.len) {
+                    ctx->state = trim_state_tag_whitespace;
+
+                    if ((size_t) (read - buf->pos)
+                        >= ngx_http_trim_script.len - 1)
+                    {
+                        write = ngx_cpymem(write, ngx_http_trim_script.data,
+                                           ngx_http_trim_script.len - 1);
+
+                    } else {
+                        ctx->saved = NGX_HTTP_TRIM_SAVE_JAVASCRIPT;
+                    }
+
+                    ctx->looked = 0;
+                    continue;
+                }
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -994,6 +1040,18 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_script.len) {
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -1010,10 +1068,21 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
                     ctx->state = trim_state_text;
                 }
                 break;
-
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_script.len) {
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -1087,19 +1156,12 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case '\t':
             case ' ':
                 if (ctx->looked == ngx_http_trim_style.len) {
-                    if (conf->jscss_enable) {
-                        ctx->state = trim_state_tag_style_css_begin;
-
-                    } else {
-                        ctx->state = trim_state_tag_style_end;
-                    }
-
-                    ctx->looked = 0;
-
-                } else {
-                    ctx->state = trim_state_tag_whitespace;
+                    ctx->tag = NGX_HTTP_TRIM_TAG_STYLE;
                 }
-                break;
+
+                ctx->state = trim_state_tag_whitespace;
+                ctx->looked = 0;
+                continue;
             case '>':
                 ctx->state = trim_state_text;
                 break;
@@ -1109,27 +1171,6 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
             break;
 
-        case trim_state_tag_style_css_begin:
-            if (ch == '>') {
-                if (ctx->looked == ngx_http_trim_style_css.len) {
-                    ctx->state = trim_state_tag_style_css_text;
-
-                } else {
-                    ctx->state = trim_state_tag_style_end;
-                }
-                ctx->looked = 0;
-
-            } else {
-                if (ctx->looked != ngx_http_trim_style_css.len) {
-                    look = ngx_http_trim_style_css.data[ctx->looked++];
-                    if (ch != look) {
-                        ctx->looked = 0;
-                    }
-                }
-            }
-
-            break;
-
         case trim_state_tag_style_css_text:
             switch (ch) {
             case '\r':
@@ -1416,6 +1457,18 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_style.len) {
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -1435,6 +1488,18 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_style.len) {
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -1503,22 +1568,106 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
 
             break;
 
-        case trim_state_tag_pre_end:
+        case trim_state_tag_pre:
+            switch (ch) {
+            case '<':
+                ctx->state = trim_state_tag_pre_angle;
+                break;
+            default:
+                break;
+            }
+            break;
+
+        case trim_state_tag_pre_angle:
+            switch (ch) {
+            case '/':
+                ctx->state = trim_state_tag_pre_end;
+                ctx->looked = 2;
+                break;
+            case 'p':
+                ctx->state = trim_state_tag_pre_nest;
+                ctx->looked = 3;
+                break;
+            case '<':
+                break;
+            default:
+                ctx->state = trim_state_tag_pre;
+                break;
+            }
+            break;
+
+        case trim_state_tag_pre_nest:
             look = ngx_http_trim_pre.data[ctx->looked++];
             if (ch == look) {
                 if (ctx->looked == ngx_http_trim_pre.len) {
-                    ctx->state = trim_state_text;
+                    ctx->count++;
+                    ctx->state = trim_state_tag_pre;
                 }
                 break;
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_pre.len) {
+                    ctx->count++;
+                    ctx->tag = NGX_HTTP_TRIM_TAG_PRE;
+                    ctx->state = trim_state_tag_whitespace;
+                    continue;
+
+                } else {
+                    ctx->state = trim_state_tag_pre;
+                }
+
+                break;
             case '<':
-                ctx->looked = 1;
+                ctx->state = trim_state_tag_pre_angle;
                 break;
             default:
+                ctx->state = trim_state_tag_pre;
+                break;
+            }
+            break;
+
+        case trim_state_tag_pre_end:
+            look = ngx_http_trim_pre.data[ctx->looked++];
+            if (ch == look) {
+                if (ctx->looked == ngx_http_trim_pre.len) {
+                    if (--ctx->count > 0) {
+                        ctx->state = trim_state_tag_pre;
+
+                    } else {
+                        ctx->state = trim_state_text;
+                    }
+                }
+                break;
+            }
+
+            switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_pre.len) {
+                    if (--ctx->count > 0 ) {
+                        ctx->tag = NGX_HTTP_TRIM_TAG_PRE;
+                    }
+
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
                 ctx->looked = 0;
                 break;
+            case '<':
+                ctx->state = trim_state_tag_pre_angle;
+                break;
+            default:
+                ctx->state = trim_state_tag_pre;
+                break;
             }
             break;
 
@@ -1532,6 +1681,18 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             }
 
             switch (ch) {
+            case '\r':
+            case '\n':
+            case '\t':
+            case ' ':
+                if (ctx->looked == ngx_http_trim_textarea.len) {
+                    ctx->state = trim_state_tag_whitespace;
+                    ctx->looked = 0;
+                    continue;
+                }
+
+                ctx->looked = 0;
+                break;
             case '<':
                 ctx->looked = 1;
                 break;
@@ -1548,12 +1709,11 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
             case ' ':
                 continue;
             case '\n':
-                if (ctx->first_line) {
-                    ctx->first_line = 0;
-                    break;
+                if (ctx->prev == ch) {
+                    continue;
 
                 } else {
-                    continue;
+                    break;
                 }
             case '<':
                 ctx->state = trim_state_tag;
@@ -1579,32 +1739,117 @@ ngx_http_trim_parse(ngx_http_request_t *r, ngx_buf_t *buf,
                 ctx->state = trim_state_tag_double_quote;
                 break;
             case '>':
-                ctx->state = trim_state_text;
+                if (ctx->tag == NGX_HTTP_TRIM_TAG_PRE) {
+                    ctx->state = trim_state_tag_pre;
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_TEXTAREA) {
+                    ctx->state = trim_state_tag_textarea_end;
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_SCRIPT) {
+                    if (conf->jscss_enable
+                        && ctx->looked == ngx_http_trim_script_js.len)
+                    {
+                        ctx->state = trim_state_tag_script_js_text;
+
+                    } else {
+                        ctx->state = trim_state_tag_script_end;
+                    }
+
+                } else if (ctx->tag == NGX_HTTP_TRIM_TAG_STYLE) {
+                    if (conf->jscss_enable
+                        && ctx->looked == ngx_http_trim_style_css.len)
+                    {
+                        ctx->state = trim_state_tag_style_css_text;
+
+                    } else {
+                        ctx->state = trim_state_tag_style_end;
+                    }
+
+                } else {
+                    ctx->state = trim_state_text;
+                }
+
+                ctx->tag = 0;
+                ctx->looked = 0;
                 break;
             default:
-                ctx->state = trim_state_tag_text;
+                ctx->state = trim_state_tag_attribute;
                 break;
             }
+
+            if (ch != '>') {
+                if (read > buf->pos) {
+                    *write++ = ' ';
+
+                } else {
+                    ctx->saved = NGX_HTTP_TRIM_SAVE_SPACE;
+                }
+            }
+
             break;
 
         case trim_state_tag_single_quote:
             switch (ch) {
             case '\'':
-                ctx->state = trim_state_tag_text;
+                ctx->state = trim_state_tag_attribute;
                 break;
             default:
                 break;
             }
+
+            if (!conf->jscss_enable) {
+                break;
+            }
+
+            if (ctx->tag == NGX_HTTP_TRIM_TAG_SCRIPT) {
+                if (ctx->looked != ngx_http_trim_script_js.len) {
+                    look = ngx_http_trim_script_js.data[ctx->looked++];
+                    if (ch != look) {
+                        ctx->looked = 0;
+                    }
+                }
+
+            } else if (ctx->tag == NGX_HTTP_TRIM_TAG_STYLE) {
+                if (ctx->looked != ngx_http_trim_style_css.len) {
+                    look = ngx_http_trim_style_css.data[ctx->looked++];
+                    if (ch != look) {
+                        ctx->looked = 0;
+                    }
+                }
+            }
+
             break;
 
         case trim_state_tag_double_quote:
             switch (ch) {
             case '"':
-                ctx->state = trim_state_tag_text;
+                ctx->state = trim_state_tag_attribute;
                 break;
             default:
                 break;
             }
+
+            if (!conf->jscss_enable) {
+                break;
+            }
+
+            if (ctx->tag == NGX_HTTP_TRIM_TAG_SCRIPT) {
+                if (ctx->looked != ngx_http_trim_script_js.len) {
+                    look = ngx_http_trim_script_js.data[ctx->looked++];
+                    if (ch != look) {
+                        ctx->looked = 0;
+                    }
+                }
+
+            } else if (ctx->tag == NGX_HTTP_TRIM_TAG_STYLE) {
+                if (ctx->looked != ngx_http_trim_style_css.len) {
+                    look = ngx_http_trim_style_css.data[ctx->looked++];
+                    if (ch != look) {
+                        ctx->looked = 0;
+                    }
+                }
+            }
+
             break;
 
         default:
